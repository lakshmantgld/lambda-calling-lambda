service: invoke-lambda

provider:
  name: aws
  runtime: nodejs6.10
  cfLogs: true
  stage: dev
  region: ap-northeast-1
  timeout: 20
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - "logs:CreateLogGroup"
        - "logs:CreateLogStream"
        - "logs:PutLogEvents"
        - "lambda:InvokeFunction"
        - "lambda:InvokeAsync"
      Resource: "*"

plugins:
  - serverless-webpack

custom:
  webpackIncludeModules: true # enable auto including node_modules
  graphiql:
    babelOptions:
      presets: [es2015, es2016, stage-0]
      plugins: [transform-runtime]

functions:
  lambdaA:
    handler: handler.lambdaA
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - "logs:CreateLogGroup"
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
          - "lambda:InvokeFunction"
          - "lambda:InvokeAsync"
        Resource: "*"
    events:
      - http:
          path: lambdaA
          method: get
          integration: lambda
          cors: true
          response:
            headers:
              Access-Control-Allow-Origin: "'*'"

  lambdaB:
    handler: handler.lambdaB
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - "logs:CreateLogGroup"
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
          - "lambda:InvokeFunction"
          - "lambda:InvokeAsync"
        Resource: "*"
